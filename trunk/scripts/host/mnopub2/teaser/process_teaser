#!/bin/bash
################################################################################################
#	Scriptet behandler Escenic 5.x artikkel eksport og produserer henvisnings artikler. Dvs.
#	Artikkel med forsidetittel og forside ingress med tilhørende bilde.
#	
#	Scriptet identifiserer første forsidebilde, og sletter alle øvrige bilder.
#	Scriptet endrer også navnet på bildet, - dvs. putter på sourceid+a+.jpg
#	Eks. seiling1234567a.jpg
#	Xml'en blir også oppdatert med det samme navnet.
#	
#	Xml'en blir strippet for kode som ikke blir benyttet.
#	
#   Scriptet kjøres vi crontab
#	crontab kaller: checkhenvisninger [katalog hvor filene ligger]
#	som kaller:
#	process_henvisning [filnavn]
#
#   Geir A. 2011
################################################################################################

function copyImage {
	echo "Copying  ${1} to ${2} "
	if [ "${1}" != "" ] && [ "${2}" != "" ]
	then
		cp "${1}" "${2}"
	fi
}

########################################################## Start of application ##########################################################

# location for the binaries
app_location="$( cd "$( dirname "$0" )" && pwd )"
vertical="$2"

################### Initialize ################### 
# initialize vertical specific settings
if [ -f "${app_location}/${vertical}_config.inc" ]; then
	. ${app_location}/${vertical}_config.inc
else
	echo "Configuration: ${app_location}/${vertical}_config.inc doesn't exist"
	echo "Usage: $0 [filelocation] [type]"
	echo "Ie: $0 fra_escenic bil"
	exit	 
fi	

# creating folders if missing
if [ ! -d "$tmpFolder" ]; then
	echo "Creating $tmpFolder"
    mkdir -p ${tmpFolder}
fi

filename="$1"
if [ "${filename}" = "" ]
then
	echo "Missing filename"
	exit
else 
	if [ ! -f "${filename}" ]; then
		echo "${filename} doesn't exist"
		exit 
	fi
fi

basefilename=`basename ${filename}`

# Creating the folder export_tmp if it doesn't exist
exists=`[ -d ${tmpFolder} ] && echo "true" || echo "false"`
if [ ${exists} = 'false' ]; then
	echo "Directory  ${tmpFolder} doesn't exists"
    mkdir -p ${tmpFolder}
fi

################### Initialize complete #############

echo "Processing: ${filename}"

# Renaming the namespace prefix xmlns as this cause parsing problems
origXmlbuffer=`cat "${filename}" | sed -e 's/ xmlns=/ xxmlns=/g'`

# store all referenced images before transforming the xml to be used for cleanup
referencedImages=`echo $origXmlbuffer | xmlstarlet sel  -t -m "//content[@type='picture']" -v "field[@name='binary']"  -n`

# Transforming the source xml to a reduced subset
origXmlbuffer=`echo $origXmlbuffer | xmlstarlet tr ${app_location}/teaser.xsl | xmlstarlet fo`
origXmlbuffer=`echo $origXmlbuffer | sed -e 's/ xmlns=/ xxmlns=/g'`

# check publish date and leave the article in the folder until date is reached
publishdate=$(echo $origXmlbuffer | xmlstarlet sel  -t -m "//content[@type='news']/@publishdate" -v "//content[@type='news']/@publishdate")
if [ "${publishdate}" != "" ]
then
	# Converting the publishdate to a numeric string ie. 20111120131212
	// Stripping of any not numeric
	publishdateVar=/${publishdate//[^0-9]/}
	if [ $(date +%Y%m%d%H%M%S) -le ${publishdateVar} ]
	then
		echo "Publishdate: ${publishdate} not reached, exiting"
		exit
	fi
fi

# Fetch the image
imagepath=`echo $origXmlbuffer | xmlstarlet sel  -t -m "//content[@type='picture']/field[@name='binary']" -v "//content[@type='picture']/field[@name='binary']"`

# Resolving the article url
url=`echo $origXmlbuffer | xmlstarlet sel -t -m //content/uri -v . -n`

############################# Processing image filename ####################################

# Creating filename containing sourceid
echo "imagepath: ${imagepath}"
if [ "${imagepath}" != '' ]
then
	# Resolve filename
	imagefile="${imagepath#*/}"
	len="${#imagefile}"
	# fold extesion to lowercase
	extension=`echo ${imagefile: ${len}-4} | tr [:upper:] [:lower:]`
	# new image dest file
	imagedestfilename=`echo ${imagefile:0:${len}-4}${extension} | sed s/?/x/g`
fi

############################# Updating the xml with site specific values ####################################
# Loop for every host definition
# Patch the xml with site specific variables
counter=0
for host in ${hosts[@]}
do 
	destfolder=${tmpFolder}/${hosts[counter]}
	if [ ! -d "${destfolder}" ]; then
		echo "Creating ${destfolder}"
	    mkdir -p ${destfolder}
	fi
	
	echo "ImageDestinationFilename:  ${imagedestfilename}"
	echo "Outputting to: ${destfolder}/${basefilename/.xml/}_export.xml"
	# Special processing for each Escenic version
	if [ ${version[counter]} == "5" ]
	then
		# Updating the content with new url and updating the picture name/title with new image name (name[sourceid]a.ext)
		translatedXml=`echo ${origXmlbuffer} | xmlstarlet ed -u "//content/field[@name='link']" -v "${hosturls[counter]}${url}" | \
		xmlstarlet ed -u "//content[@type='picture']/field[@name='binary']" -v "${imagedestfilename}" | \
		xmlstarlet ed -u "//content[@type='picture']/field[@name='binary']/@title" -v "${imagedestfilename}" | \
		xmlstarlet ed -u "//content[@type='picture']/field[@name='title']" -v "${imagedestfilename}" | \
		xmlstarlet ed -u "//relation[@type='TEASERREL']/field[@name='title']" -v "${imagedestfilename}"` 

		# Stripping of any namespace
		echo $translatedXml | sed -e 's/ xxmlns=\"http:\/\/xmlns.escenic.com\/2009\/import\"//g' | sed -e 's/ xmlns=\"http:\/\/xmlns.escenic.com\/2009\/import\"//g' | xmlstarlet fo > ${destfolder}/${basefilename/.xml/}_export.xml
		
	elif [  ${version[counter]} == "4.3" ]
	then
		#Outputting to Escenic 4.x format and some update of variables in the xml
		translatedXml=`echo $origXmlbuffer | xmlstarlet tr ${app_location}/${xslt[counter]} | xmlstarlet fo`
		#Replacing the url with full path
		echo ${translatedXml} | xmlstarlet ed -u "//article/field[@name='link']" -v "${hosturls[counter]}${url}" |\
		xmlstarlet ed -u "//multimediaGroup[@name]/@name" -v "${imagedestfilename}"  | \
		xmlstarlet ed -u "//multimediaGroup/multimedia[@filename]/@filename" -v "${imagedestfilename}"> "${destfolder}/${basefilename/.xml/}_export.xml"
	fi
	# Copying the image to each of the folders
	#iconv -f UTF-8
	copyImage "${imagepath}"  "${destfolder}/${imagedestfilename}"
	counter=`expr $counter + 1`
done

############################# Cleanup ####################################
# Removing all image folders referenced in this xml
for img in ${referencedImages}
do
	if [ -d "${img%%/*}" ]
	then
		echo "Deleting imagefolder: ${img%%/*}" 
		rm -rf ${img%%/*}
	fi
done
echo "Deleting file: ${filename}"
rm "${filename}"




