var fs = require('fs');
var underscore = require('underscore');
//var jsFilesToOmit = require('javaScriptFilesToOmit');

/**
*@param {parameters} should contain : projectLocation, extension, filesToOmit[]
*/
exports.findSrcLocation = function(parameters, propertiesToChange, callback){
	console.log('--> in find src location');
	console.log("get : " + parameters.projectLocation);
	var finder = require('findit').find(parameters.projectLocation);
	var directoriesWithFile = [];
	var filesToOmit = parameters.filesToOmit;
	console.log('get files to omit : ' + filesToOmit);

	finder.on('file', function (file) {
		if( contains( file, parameters.extension) && notAny(file, filesToOmit, contains)  ){
    		console.log(file);
    		var extracted = extractDirectory(file);
    		
    		if(shouldPushNewPath(directoriesWithFile,extracted)){
    			directoriesWithFile.push(extracted);
    		}
    	}
	});
	finder.on('end', function(){
		console.log('find js files in : ' + directoriesWithFile);
		propertiesToChange.SRC = directoriesWithFile;
		callback(propertiesToChange);
	});

}

function shouldPushNewPath(directoriesWithFile,extracted){
	return !underscore.contains(directoriesWithFile,extracted)
    			&& !isSubpath(directoriesWithFile, extracted);
}

function isSubpath(paths, path){
	var result = false;
	paths.map(function(currentPath){
		if(contains(path, currentPath)){
			result = true;
		}
	});
	return result;
}

function contains(path, expression){
	if(path.indexOf(expression) != -1) 
		return true;
	return false;

} 

function notAny(path, expressions, predicate){
	var result = true;
	expressions.map(function(currentExpression){
		if(predicate(path, currentExpression)){
			result = false;
		}
	});
	return result;
}

function extractDirectory(path){
	var delimeter = '/';
	var splittedPath = path.split(delimeter);
	var indexOfLastElement = splittedPath.length - 1;
	var nameToCutFromPath = splittedPath[indexOfLastElement];
	var result = path.substring(0, path.length - nameToCutFromPath.length);
	console.log("----> result of extracting :  " + result);
	return result;


}