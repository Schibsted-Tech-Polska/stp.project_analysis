var exec = require('child_process').exec;
var fs = require('fs');
var flow = require('nimble');
var utilModule = require('utilModule');

var languageToFileMap = {'java' : 'java.properties',
						  'php' : 'php.properties' ,
						   'js' : 'js.properties' };

var nameOfPropertiesFile = 'sonar-project.properties';

var basePropertiesPath = function(){
	return __dirname.replace('node_modules','base_properties');
}

exports.analyze = function(properties){

	 //language, projectLocation, link,nameOfRepo;
	 var language = properties['targetLanguage'];
	 var projectLocation = properties["projectLocation"];
	 var link = properties["link"];
	 var nameOfRepo = properties["nameOfGitRepo"];

	 var sonar_runner_command = 'sonar-runner';
	 console.log('nameOfRepo : ' + nameOfRepo);
	 console.log("lang  : " + language);

	 var propertiesToChange = {'UNIQUE_KEY' : escapeCharacters(link),
							  'NAME' : nameOfRepo };
     var interval = 10000;//ms
	 flow.series([
	 function(callback){
	 	
	 		var languageAndLocation = {
	 			'language' : language,
	 			'projectLocation' : projectLocation
	 		}	
	 		console.log("--->step1 - generating properties file");
            generatePropertiesFile(languageAndLocation, propertiesToChange, callback);
 			callback();
	
	 },
	 function(callback){
	 	//setTimeout(function(){
		console.log('--->step2 - going to projectLocation : ' + projectLocation);
	 	 //exec('cd ' + projectLocation);
	 	 var options = {
            cwd: projectLocation
	 	 };
     	 exec(sonar_runner_command,options,function(err, stdout, stderr){

     	 	console.log("--->after executeing sonar-runner");
     	 	console.log('stdout : ' + stdout); 

     	 	utilModule.deleteFolder(projectLocation);

     	 }); 
	    //},interval);
	 }		
	 /*				  
     generatePropertiesFile(language, projectLocation,propertiesToChange);
     console.log('going to projectLocation : ' + projectLocation);
     exec('cd ' + projectLocation);
     exec(sonar_runner_command); */
     ]);
     
}


function generatePropertiesFile(languageAndLocation ,propertiesToChange, callback) {

	
	var language = languageAndLocation['language'];
	var projectLocation = languageAndLocation['projectLocation'];

	var delimeter  = '/';
	var srcPath = basePropertiesPath() + delimeter + languageToFileMap[language];
	console.log("sourcepath : " + srcPath);
	var destPath = projectLocation + delimeter + nameOfPropertiesFile;
	console.log("destPath : " + projectLocation);

// 	utilModule.readTextFile(srcPath);
	//fs.createReadStream(srcPath).pipe(fs.createWriteStream(projectLocation));
	//readTextFile(srcPath);
	//console.log('--> readTextFile ' + readTextFile);
	/*var propertiesToChange = {'UNIQUE_KEY' : escapeCharacters(newId),
							  'NAME' : nameOfRepo };
*/


	utilModule.copyFileAndChangeProperties(srcPath, destPath, propertiesToChange,
	  function(err){

		console.log("fileSuccesfully copied + err : " + err);
		callback();
	});
}

function escapeCharacters(newId){
	var charToBeEscape = '/';
	var charToEscape = '_';
	return replaceAll(charToBeEscape, charToEscape, newId);
}

function replaceAll(find, replace, str) {
  return str.replace(new RegExp(find, 'g'), replace);
}


exports.getUrlOfAnalyzedProject = function(projectLink){
	var sonarUrl = "http://localhost:9000/dashboard/index/";//should be changed on prod
    return sonarUrl+escapeCharacters(projectLink);
    	
}

