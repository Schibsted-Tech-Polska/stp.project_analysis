var exec = require('child_process').exec;
var fs = require('fs');
var flow = require('nimble');
var utilModule = require('utilModule');

var languageToFileMap = {'java' : 'java.properties',
						  'php' : 'php.properties' ,
						   'js' : 'js.properties' };

var sonar_runner_command = 'sonar-runner';

var nameOfPropertiesFile = 'sonar-project.properties';

var basePropertiesPath = function(){
	return __dirname.replace('node_modules','base_properties');
}

exports.analyze = function(properties){



	 //language, projectLocation, link,nameOfRepo;
	 var language = properties['targetLanguage'];
	 var projectLocation = properties["projectLocation"];
	 var link = properties["link"];
	 var nameOfRepo = properties["nameOfGitRepo"];

	 var sonar_runner_command = 'sonar-runner';
	 console.log('nameOfRepo : ' + nameOfRepo);
	 console.log("lang  : " + language);

	 var propertiesToChange = {'UNIQUE_KEY' : escapeCharacters(link),
							  'NAME' : nameOfRepo };
	 var languageAndLocation = {
	 			'language' : language,
	 			'projectLocation' : projectLocation
	 			}	

	 flow.series([
	 function(callback){
	 	
	 		var languageAndLocation = {
	 			'language' : language,
	 			'projectLocation' : projectLocation
	 		}	
	 		console.log("--->step1 - generating properties file");
	 		
            generatePropertiesFile(languageAndLocation, propertiesToChange, callback);
 			//callback();
	
	 },
	 function(callback){
	 	
	 	startSonarRunnerClient(languageAndLocation);
		}		
	
     ]);
     
}


function startSonarRunnerClient(languageAndLocation){
		
	 	var language = languageAndLocation['language'];
		var projectLocation = languageAndLocation['projectLocation']; 
		console.log('--->step2 - going to projectLocation : ' + projectLocation);
	 	 

	 	

	 	 if(language === 'java'){
	 	 	startJavaClient(projectLocation);
	 	 }else{
	 	 	startOtherLanguagesClient(projectLocation);
	 	 }

	 	 

}

function startJavaClient(projectLocation){
	
	

	checkTypeOfJavaProject(projectLocation);
	

}

function startOtherLanguagesClient(projectLocation){
	 var options = {
            cwd: projectLocation
	 	 };
		var projectLocation = options['cwd'];

		 console.log('-----> before executing sonar-runner other');
	 	 
     	 exec(sonar_runner_command,options,function(err, stdout, stderr){

     	 	console.log("--->after executeing sonar-runner");
     	 	console.log('stdout : ' + stdout); 

     	 	utilModule.deleteFolder(projectLocation);

     	 }); 



}


function generatePropertiesFile(languageAndLocation ,propertiesToChange, callback) {

	
	var language = languageAndLocation['language'];
	var projectLocation = languageAndLocation['projectLocation'];

	var delimeter  = '/';
	var srcPath = basePropertiesPath() + delimeter + languageToFileMap[language];
	console.log("sourcepath : " + srcPath);
	var destPath = projectLocation + delimeter + nameOfPropertiesFile;
	console.log("destPath : " + projectLocation);



	utilModule.copyFileAndChangeProperties(srcPath, destPath, propertiesToChange,
	  function(err){

		console.log("fileSuccesfully copied + err : " + err);
		callback();
	});
}

function escapeCharacters(newId){
	var charToBeEscape = '/';
	var charToEscape = '_';
	return replaceAll(charToBeEscape, charToEscape, newId);
}

function replaceAll(find, replace, str) {
  return str.replace(new RegExp(find, 'g'), replace);
}


exports.getUrlOfAnalyzedProject = function(projectLink){
	var sonarUrl = "http://localhost:9000/dashboard/index/";//should be changed on prod
    return sonarUrl+escapeCharacters(projectLink);
    	
}


function checkTypeOfJavaProject(projectLocation){
	 var options = {
            cwd: projectLocation
	 	 };

	var finder = require('findit').find(projectLocation);

    var typeOfProject;
    var locationsOfBuildFiles = [];
    var counter = 0;
	
	//This listens for files found
	finder.on('file', function (file) {
		if(file.indexOf('pom.xml') != -1){
			console.log("+++++++ its maven project");
			typeOfProject = 'maven';
			locationsOfBuildFiles[counter] = file;
			
		}else if(file.indexOf('build.xml') != -1){
			typeOfProject = 'ant';
			locationsOfBuildFiles[counter] = file;
		}else if(file.indexOf('build.gradle') != -1){
			typeOfProject = 'gradle';
			locationsOfBuildFiles[counter] = file;
		}
		counter++;
  		//console.log('-->File: ' + file);
	});

	finder.on('end',function(){
		console.log('-------->type of java project : ' + typeOfProject);
		console.log('locationsOfBuildFiles : ' + locationsOfBuildFiles);

		executeProperSonarJavaCommand(typeOfProject,options);
	});
}

function executeProperSonarJavaCommand(typeOfProject, options){
	var projectLocation = options['cwd'];
    console.log("receive type of projeect : " + typeOfProject);

    if(typeOfProject==='maven'){
     	var mavenInstallCommand = 'mvn clean install';
     	var mavenAndSonnar = 'mvn sonar:sonar';
     	console.log('---->maven install and maven:sonar');

     	exec(mavenInstallCommand,options,function(err, stdout, stderr){

     	 	console.log("--->after execting mvc clean install");
     	 	console.log('stdout : ' + stdout);
     	 	exec(mavenAndSonnar,options,function(err, stdout,stderr){
				console.log("---> after execting mvn sonar:sonar");
				console.log('stdout:  ' + stdout);
				utilModule.deleteFolder(projectLocation);
     	 	});
     	 });
	 }else if(typeOfProject==='ant'){
	 	var antBuildCommand = 'ant build';
     	
     	console.log('---->ant');

     	exec(antBuildCommand,options,function(err, stdout, stderr){

     	 	console.log("--->after "  + antBuildCommand);
     	 	console.log('stdout : ' + stdout);
     	 	console.log("!!!!! -- - err " + err);
     	 	console.log('stderr : ' + stderr);
     	 	exec(sonar_runner_command,options,function(err, stdout,stderr){
				console.log("---> after execting sonnar runner");
				console.log('stdout:  ' + stdout);
				utilModule.deleteFolder(projectLocation);
     	 	});
     	 });
	}else{
		 console.log('-----> before executing sonar-runner java ');// + projectLocation + sonar_runner_command);
	 	 
     	 exec(sonar_runner_command,options,function(err, stdout, stderr){

     	 	console.log("--->after executeing sonar-runner");
     	 	console.log('stdout : ' + stdout); 

     	 	utilModule.deleteFolder(projectLocation);

     	 });
     
	}

}
