var exec = require('child_process').exec;
var fs = require('fs');
var flow = require('nimble');
var fileModule = require('fileModule');
var sourceFinder = require('sourceFinderModule');
var jsFilesToOmit = require('javaScriptFilesToOmit');
var paths = require('paths');

var languageToFileMap = {'java' : 'java.properties',
						  'php' : 'php.properties' ,
						   'js' : 'js.properties' };


var sonarRunnerCommand= 'sonar-runner';
var platoCommand = 'plato -r -d reports . ';
 
var nameOfPropertiesFile = 'sonar-project.properties';


//TODO this module is to big
var basePropertiesPath = function(){
	return __dirname.replace('node_modules','base_properties');
};

//--------------------------------------
function AnalyzeExecution(options){
	this.options = options;
	this.commands = [];
};
AnalyzeExecution.prototype.execute = function(lastCallback){
	lastCallback = lastCallback || fileModule.deleteFolder(this.options.cwd);
	executeCommands(this.options, this.commands, lastCallback);
};
AnalyzeExecution.prototype.toString = function(){
	return this.options + this.commands[0];
};

//TODO ProjectMetainfo not properties
function PropertiesGenerator( properties ){
	var filesToOmit = properties.filesToOmit;
	console.log('--->filesToOmit : ' + filesToOmit );
	this.coma=",";

	this.parameters = {
		'projectLocation':properties.projectLocation,
		'extension':"."+properties.language
	}

	if( properties.language=='js' ){
		this.parameters.filesToOmit = jsFilesToOmit.getFiles().concat(filesToOmit);
	}else{
		this.parameters.filesToOmit = jsFilesToOmit.getFiles();//TODO must be at least one
	}
	console.log("filest to omit : " + this.parameters.filesToOmit + " ext : " + this.parameters.extension);
}

PropertiesGenerator.prototype.generate = function(propertiesToChange,callback){
	sourceFinder.findSrcLocation(this.parameters ,propertiesToChange, callback);
}
//-------------------------------------------------------
exports.analyze = function(properties){

	console.log('properties.analysisTool : ' + properties.analysisTool);
	 var configPlaceholders = {'UNIQUE_KEY' : escapeCharacters(properties.link),
							  'NAME' : properties.nameOfGitRepo };//config placeholders 
	
	flow.series([
		 function(callback){
	 		console.log("--->step1 - generating properties file");
	 		//TODO propertyFile
            generatePropertiesFile(properties, configPlaceholders, callback);
 	 	},
	 	function(callback){
	 		startSonarRunnerClient(properties);
		}
	  ]);
     
}

function startSonarRunnerClient(properties){
		
	 	var language = properties.language;
		var projectLocation = properties.projectLocation; 
		
		console.log('--->step2 - going to projectLocation : ' + projectLocation);
	 	
		if(language === 'java'){
	 	 	startJavaClient(properties);
	 	 }else{
	 	 	startOtherLanguagesClient(properties);
	 	 }
}

function startJavaClient(properties){

	var projectLocation = properties.projectLocation; 
	var javaBuildCommand = properties.javaBuildCommand;
	console.log('-----> java build command : ' + javaBuildCommand); 
	
	if(javaBuildCommand){
		console.log("** user typed java build command :");
		var options = {
            cwd: projectLocation
	 	 };
	 	 
	 	 var project = new AnalyzeExecution(options)
			project.commands[0] = javaBuildCommand;
            project.commands[1] = sonarRunnerCommand;
		 
		project.execute();
	}
	else{
		checkTypeOfJavaProject(projectLocation);
	}
}


function startOtherLanguagesClient(properties){
	 var options = {
            cwd: properties.projectLocation
	 	 };


	 	 var project = new AnalyzeExecution(options)
	 	 project.commands[1] = 'none';
	 	 if(properties.analysisTool=='plato'){
	 	 	var doNothing = function(){};
	 	 	project.commands[0] = platoCommand;
	 	 	project.execute(doNothing);
	 	 }else{
			project.commands[0] = sonarRunnerCommand;
			project.execute();
		 }
} 

function generatePropertiesFile(properties ,propertiesToChange, callback) {

	console.log('---->files to omit :  ' + properties.filesToOmit);
	
	var language = properties.language;
	var projectLocation = properties.projectLocation;

	var delimeter  = '/';
	var srcPath = basePropertiesPath() + delimeter + languageToFileMap[language];
	console.log("sourcepath : " + srcPath);
	var destPath = projectLocation + delimeter + nameOfPropertiesFile;
	console.log("destPath : " + projectLocation);
    

	var saveNewProperties = function(propertiesToChange){  
		fileModule.copyFileAndChangeProperties(srcPath, destPath, propertiesToChange,
	  		function(err){
				console.log("fileSuccesfully copied + err : " + err);
				callback();
			});
	};
    //TODO 
	var propertiesGenerator = new PropertiesGenerator(properties);
	propertiesGenerator.generate(propertiesToChange,saveNewProperties);
}

function escapeCharacters(newId){
	var charToBeEscape = '/';
	var charToEscape = '_';
	return replaceAll(charToBeEscape, charToEscape, newId);
}

function replaceAll(find, replace, str) {
  return str.replace(new RegExp(find, 'g'), replace);
}


exports.getUrlOfAnalyzedProject = function(properties){

	if(properties.analysisTool == 'sonar'){
		var sonarUrl = paths.sonarUrl();//should be changed on prod
    	return sonarUrl+escapeCharacters(properties.link);
	}else{
		var appUrl = paths.applicationUrl();
		return appUrl+properties.nameOfGitRepo+'/'+'reports'+'/'+'index.html';
	}
   

}


function checkTypeOfJavaProject(projectLocation){
	 var options = {
            cwd: projectLocation
	 	 };

	var finder = require('findit').find(projectLocation);

    var typeOfProject = [];
	var locationsOfBuildFiles = [];
    var counter = 0;
	
	//This listens for files found
	finder.on('file', function (file) {//TODO only first file is important
		
		if(file.indexOf('pom.xml') != -1){
			console.log("+++++++ its maven project");
			//typeOfProject = 'maven';
			var currentFindProject = new AnalyzeExecution(options)
			currentFindProject.commands[0] = 'mvn clean install';
            currentFindProject.commands[1] = 'mvn sonar:sonar';
            typeOfProject.push(currentFindProject);
			locationsOfBuildFiles.push(file);
			
		}else if(file.indexOf('build.xml') != -1){
			var currentFindProject = new AnalyzeExecution(options);
			currentFindProject.commands[0] = 'ant build';
            currentFindProject.commands[1] = sonarRunnerCommand;
            typeOfProject.push(currentFindProject);
			locationsOfBuildFiles.push(file);
		}
		
  		
	});

	finder.on('end',function(){
		console.log('-------->type of java project : ' + typeOfProject[0]);
		//console.log('locationsOfBuildFiles : ' + locationsOfBuildFiles);

		if(typeOfProject.length === 0) {
			console.log("-->type of project length  == 0 ")
			//typeOfProject = 'gradle';
			var currentFindProject = new AnalyzeExecution(options);
		    currentFindProject.commands[0] = sonarRunnerCommand;
            currentFindProject.commands[1] = 'none';
            typeOfProject.push(currentFindProject);
            console.log("--> " + typeOfProject);
			
		}

		  typeOfProject[0].execute();
	});
}

function executeCommands(options, commands, lastFunction){
	console.log("receive commands : " + commands + " last : " + lastFunction);

	var firstCall = true;
	
	var arrayOfExec = 
	commands.map(function(currentCommand){
		
			return function(callback){
				exec(currentCommand, options, function(err,stdout,stderr){
					console.log("-->after command : " + currentCommand);
					console.log("stdout : " + stdout );
					callback();	
				});
			};
	});
	

	arrayOfExec.push(function(callback){
		        console.log('-->beforelast:'+ lastFunction);
			    lastFunction();
				callback();	
			});

	flow.series(arrayOfExec);//apply(flow,arrayOfExec);
	
	console.log('--->arrayOfExec' + arrayOfExec);
}	

