var exec = require('child_process').exec;
var fs = require('fs');
var flow = require('nimble');
var utilModule = require('utilModule');

var languageToFileMap = {'java' : 'java.properties',
						  'php' : 'php.properties' ,
						   'js' : 'js.properties' };

var sonar_runner_command = 'sonar-runner';

var nameOfPropertiesFile = 'sonar-project.properties';

var basePropertiesPath = function(){
	return __dirname.replace('node_modules','base_properties');
};

exports.analyze = function(properties){

	 var language = properties['targetLanguage'];
	 var projectLocation = properties["projectLocation"];
	 var link = properties["link"];
	 var nameOfRepo = properties["nameOfGitRepo"];

	 var sonar_runner_command = 'sonar-runner';
	 console.log('nameOfRepo : ' + nameOfRepo);
	 console.log("lang  : " + language);

	 var propertiesToChange = {'UNIQUE_KEY' : escapeCharacters(link),
							  'NAME' : nameOfRepo };
	 var languageAndLocation = {
	 			'language' : language,
	 			'projectLocation' : projectLocation
	 			}	

	 flow.series([
		 function(callback){
	 	
	 		console.log("--->step1 - generating properties file");
	 		
            generatePropertiesFile(languageAndLocation, propertiesToChange, callback);
 			//callback();
	
	 	},
	 	function(callback){
	 	
	 		startSonarRunnerClient(properties);
		}		
	
     ]);
     
}


function startSonarRunnerClient(properties){
		
	 	var language = properties['targetLanguage'];
		var projectLocation = properties['projectLocation']; 
		
		console.log('--->step2 - going to projectLocation : ' + projectLocation);
	 	
		if(language === 'java'){
	 	 	startJavaClient(properties);
	 	 }else{
	 	 	startOtherLanguagesClient(projectLocation);
	 	 }

	 	 

}

function startJavaClient(properties){

	var projectLocation = properties['projectLocation']; 
	var javaBuildCommand = properties['javaBuildCommand'];
	console.log('-----> java build command : ' + javaBuildCommand); 
	
	if(javaBuildCommand){
		console.log("** user typed java build command :");
		var options = {
            cwd: projectLocation
	 	 };
	 	 var commands = [];
	 	 commands[0] = javaBuildCommand;
	 	 commands[1] = sonar_runner_command;
	 	 executeTwoCommands(options,commands);
		//customSonarCommand(properties);
	}
	else{
		checkTypeOfJavaProject(projectLocation);
	}
}


function startOtherLanguagesClient(projectLocation){
	 var options = {
            cwd: projectLocation
	 	 };

	 	 var commands = [];
	 	 commands[0] = sonar_runner_command;
	 	 commands[1] = 'none';
	 	 executeTwoCommands(options,commands);
}


function generatePropertiesFile(languageAndLocation ,propertiesToChange, callback) {

	var language = languageAndLocation['language'];
	var projectLocation = languageAndLocation['projectLocation'];

	var delimeter  = '/';
	var srcPath = basePropertiesPath() + delimeter + languageToFileMap[language];
	console.log("sourcepath : " + srcPath);
	var destPath = projectLocation + delimeter + nameOfPropertiesFile;
	console.log("destPath : " + projectLocation);


	//if(language === 'js'){

	//}



	utilModule.copyFileAndChangeProperties(srcPath, destPath, propertiesToChange,
	  function(err){

		console.log("fileSuccesfully copied + err : " + err);
		callback();
	});
}

function escapeCharacters(newId){
	var charToBeEscape = '/';
	var charToEscape = '_';
	return replaceAll(charToBeEscape, charToEscape, newId);
}

function replaceAll(find, replace, str) {
  return str.replace(new RegExp(find, 'g'), replace);
}


exports.getUrlOfAnalyzedProject = function(projectLink){
	var sonarUrl = "http://localhost:9000/dashboard/index/";//should be changed on prod
    return sonarUrl+escapeCharacters(projectLink);
    	
}


function checkTypeOfJavaProject(projectLocation){
	 var options = {
            cwd: projectLocation
	 	 };

	var finder = require('findit').find(projectLocation);

    var typeOfProject;
    var locationsOfBuildFiles = [];
    var counter = 0;
	
	//This listens for files found
	finder.on('file', function (file) {
		if(file.indexOf('pom.xml') != -1){
			console.log("+++++++ its maven project");
			typeOfProject = 'maven';
			locationsOfBuildFiles[counter] = file;
			
		}else if(file.indexOf('build.xml') != -1){
			typeOfProject = 'ant';
			locationsOfBuildFiles[counter] = file;
		}else if(file.indexOf('build.gradle') != -1){
			typeOfProject = 'gradle';
			locationsOfBuildFiles[counter] = file;
		}
		counter++;
  		
	});

	finder.on('end',function(){
		console.log('-------->type of java project : ' + typeOfProject);
		console.log('locationsOfBuildFiles : ' + locationsOfBuildFiles);

		executeProperSonarJavaCommand(typeOfProject,options);
	});
}

function executeProperSonarJavaCommand(typeOfProject, options){
	var projectLocation = options['cwd'];
    console.log("receive type of projeect : " + typeOfProject);
    var commands = [];

    if(typeOfProject==='maven'){
    	commands[0] = 'mvn clean install';
    	commands[1] = 'mvn sonar:sonar';
    	executeTwoCommands(options, commands);
    	//mavenSonnarCommand(options);
     }else if(typeOfProject==='ant'){
     	commands[0] = 'ant build';
     	commands[1] = sonar_runner_command;
	 	executeTwoCommands(options, commands);
	 	//antSonnarCommand(options);

	}else{
		commands[0] = sonar_runner_command;
		commands[1] = 'none';
		executeTwoCommands(options, commands);
		//otherJavaSonarCommand(options);	
    }

}

function executeTwoCommands(options, commands){
	var projectLocation = options['cwd']; 
	
	 exec(commands[0],options,function(err, stdout, stderr){
	 	console.log("--->after first command : " + stdout);
     	 	exec(commands[1],options,function(err, stdout,stderr){
     	 		console.log("--->after second command");
     	 		console.log('stdout : ' + stdout); 
				utilModule.deleteFolder(projectLocation);
     	 	});
     	 });
	 	 
}	


