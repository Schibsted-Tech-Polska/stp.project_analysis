var underscore = require('underscore');

exports.validateInput = function(properties, callback){
	var forbiddenCommands = [";", "|", "||", "&&","rm","cp","cat","ls","at","net","netstat","del","copy"];
	var gitCommandMustStartWith = ["git"];
	var javaBuildCommandMustStartWith = ["mvn","ant"];
	var safeGitCommand = 'git clone';

	if(!validateSpecyfic(properties.gitCommand,forbiddenCommands,underscore.contains)){
		console.log("---->validation of : " + properties.gitCommand + "FAILED");
		properties.gitCommand = safeGitCommand;
	}
	if(validateSpecyfic(properties.gitCommand,gitCommandMustStartWith,startsWith)){
		console.log("--->validation of : " + properties.gitCommand + "FAILED" );
		properties.gitCommand = safeGitCommand;
	}

	if(!validateSpecyfic(properties.javaBuildCommand,forbiddenCommands,underscore.contains)){
		console.log("--->validation of : " + properties.javaBuildCommand + "FAILED" );
		properties.javaBuildCommand = '';
	}

	if(validateSpecyfic(properties.javaBuildCommand,javaBuildCommandMustStartWith,startsWith)){
		console.log("--->validation of : " + properties.javaBuildCommand + "FAILED" );
		properties.javaBuildCommand = '';
	}

	var filesToOmitForbiddenCommands = [''];
	if(!validateSpecyfic(properties.filesToOmit, filesToOmitForbiddenCommands,isEqual)){
		console.log("--->validation of filestToOmit : " + properties.filesToOmit + "FAILED" );
		properties.filesToOmit = [];
	}else{
		var coma = ",";
		console.log("---->validation pass, split");
		properties.filesToOmit = properties.filesToOmit.split(coma);
	}

	console.log("--->after validation");	

	callback();
}


function validateSpecyfic(commandToValidate, forbiddenCommands,predicate){
	var result = true;
	forbiddenCommands.map(function(currentCommand){
		if(predicate(commandToValidate,currentCommand)){
			console.log("bad validation");
			result =  false;
		}
	});	
	return result;
}

function isEqual(firstArg, secondArg){
	return firstArg === secondArg;
}

function startsWith(string, properStartCommands){	
	var result = false;
	
		if(string.substring(0, properStartCommands.length)  === properStartCommands){
			result = true;
		}
	
	return result;
}



