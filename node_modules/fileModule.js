var fs = require('fs');

exports.buildAbsolutePath = function(nameOfFile){
  console.log("direcoty : " + __dirname);

  var result = __dirname.replace("node_modules",nameOfFile);
  console.log("result : " + result);
  return result;
}

exports.copyFile = function(source, target, cb) {
  var cbCalled = false;

  var rd = fs.createReadStream(source);
  rd.on("error", function(err) {
    done(err);
  });
  var wr = fs.createWriteStream(target);
  wr.on("error", function(err) {
    done(err);
  });
  wr.on("close", function(ex) {
    done();
  });
  rd.pipe(wr);

  function done(err) {
    if (!cbCalled) {
      cb(err);
      cbCalled = true;
    }
  }
}


exports.copyFileAndChangeProperties = function(source, target,propertiesToChange, callback ){
  readTextFileAndModifyContent(source,target,propertiesToChange, writeAndCall(callback));
}



readTextFileAndModifyContent = function(source, target, propertiesToChange,cb){
  fs.readFile(source, 'utf8', function (err,data) {
      if (err) {
       return console.log(err);
   }
   //console.log("data : "  + data);
  // console.log("data[] : " + data[20]);
   var stringData = data.toString();
   //console.log("data.toString : " + stringData );
   
   //var replaced = stringData.replace('UNIQUE_KEY', '1');
   //console.log("afterReplace : " + replaced);
   var replaced;  
   for(var property in propertiesToChange){
    console.log("property: "  + property 
           + " value : " + propertiesToChange[property]);
    
        
    replaced = stringData.replace(property, propertiesToChange[property]);
    stringData = replaced;
   
   }
     cb(target,replaced);
    
  });

}


writeTextFile = function(path, data, callback){
  console.log("writeTextFile : " + data);
 fs.writeFile(path, data, function(err) {
    if(err) {
        console.log(err);
    } else {
        console.log("The file was saved!");
    }
    callback();
  });
}

var writeAndCall = function(callback){
  return function(path, data){
    writeTextFile(path, data, callback);
  }
}

exports.deleteFolder = function(path){
  deleteFolderRecursive(path);
}

deleteFolderRecursive = function(path) {
//  console.log('deleting forder at path : ' + path);
  
  if( fs.existsSync(path) ) {
    fs.readdirSync(path).forEach(function(file,index){
      var curPath = path + "/" + file;
      if(fs.statSync(curPath).isDirectory()) { // recurse
        deleteFolderRecursive(curPath);
      } else { // delete file
        fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(path);
  }
}